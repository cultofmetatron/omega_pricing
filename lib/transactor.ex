defmodule PriceTracker.Transactor do
  @moduledoc """
    Transactor is in charge of storing the params generated by
    the requester into the database.

  """
  use PriceTracker.Headers, :transactor
  alias PriceTracker.Product
  alias PriceTracker.PastPriceRecord

  def merge_products(products, repo) do
    
  end

  def merge_product(product, repo) do
    # find existing product with code and external product id
    case find_existing_product(product) |> repo.one() do
      nil ->
        create_product(product, repo)
      %Product{}=product ->
        update_product(product, repo)
    end
  end

  @docp """
    Takes a product and repo and creates the product in
    the system.

  """
  defp create_product(product, repo) do
    repo.transaction(fn() ->
      new_product = Product.changeset(%Product{}, product)
                    |> repo.insert!()
                    |> repo.preload([:past_price_records])
      new_past_price_record = build_assoc(new_product, :past_price_records)
      |> PastPriceRecord.changeset(%{
          price: new_product.price,
          percentage_change: 100 # new prices are a 100% change
        })
      |> repo.insert!()
      new_product |> repo.preload([:past_price_records], force: true) #return the new product
    end)
  end

  defp update_product(product, repo) do
    {:error, :not_implimented}
  end

  defp find_existing_product(product) do
    %{company_code: code, external_product_id: external_id} = product
    from(p in Product)
      |> where([p], p.company_code == ^code and p.external_product_id == ^external_id)
  end

end
